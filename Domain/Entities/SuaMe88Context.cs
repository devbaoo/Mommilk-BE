// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Domain.Entities;

public partial class SuaMe88Context : DbContext
{
    public SuaMe88Context(DbContextOptions<SuaMe88Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<MembershipTransaction> MembershipTransactions { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderTransaction> OrderTransactions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Store> Stores { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Category__3214EC077AEE05F1");


            entity.ToTable("Category");

            entity.Property(e => e.AgeRange)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.MilkType)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.TargetAudience)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<Feedback>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Feedback__3214EC07C7732EF7");



            entity.ToTable("Feedback");

            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Feedback_User");

            entity.HasOne(d => d.Product).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Feedback_Product");
        });

        modelBuilder.Entity<Membership>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Membersh__3214EC0735D7F1D6");


            entity.ToTable("Membership");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<MembershipTransaction>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Membersh__3214EC0781E46966");

            entity.ToTable("MembershipTransaction");

            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Membership).WithMany(p => p.MembershipTransactions)
                .HasForeignKey(d => d.MembershipId)
                .HasConstraintName("FK_MembershipTransaction_Membership");

            entity.HasOne(d => d.StoreOwner).WithMany(p => p.MembershipTransactions)
                .HasForeignKey(d => d.StoreOwnerId)
                .HasConstraintName("FK_MembershipTransaction_User");
        });

        modelBuilder.Entity<Order>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Order__3214EC07701E5DF3");


            entity.ToTable("Order");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(256);
            entity.Property(e => e.Phone).HasMaxLength(15);
            entity.Property(e => e.Recipient).HasMaxLength(256);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Order_User");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__OrderDet__3214EC073A49B93B");


            entity.ToTable("OrderDetail");

            entity.Property(e => e.Price).HasColumnType("money");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_OrderDetail_Order");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_OrderDetail_Product");
        });

        modelBuilder.Entity<OrderTransaction>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__OrderTra__3214EC0703EB4EB8");


            entity.ToTable("OrderTransaction");

            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Customer).WithMany(p => p.OrderTransactions)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_OrderTransaction_User");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderTransactions)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_OrderTransaction_Order");
        });

        modelBuilder.Entity<Product>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Product__3214EC078F38BE07");


            entity.ToTable("Product");

            entity.Property(e => e.Brand)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Capacity).HasMaxLength(256);
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            entity.Property(e => e.Flavour).HasMaxLength(256);
            entity.Property(e => e.Ingredient).HasMaxLength(256);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Origin)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Sample).HasMaxLength(256);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.SweetLevel).HasMaxLength(256);

            entity.HasOne(d => d.Store).WithMany(p => p.Products)
                .HasForeignKey(d => d.StoreId)
                .HasConstraintName("FK_Product_Store");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__ProductC__3214EC070946694F");

            entity.ToTable("ProductCategory");

            entity.HasOne(d => d.Category).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_ProductCategory_Category");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ProductCategory_Product");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__ProductI__3214EC074B19E46C");


            entity.ToTable("ProductImage");

            entity.Property(e => e.Url).IsRequired();

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ProductImage_Product");
        });

        modelBuilder.Entity<Role>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07EABEF56E");


            entity.ToTable("Role");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<Store>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__Store__3214EC07404944E7");


            entity.ToTable("Store");

            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<User>(entity =>
        {

            entity.HasKey(e => e.Id).HasName("PK__User__3214EC07ADCB51FC");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D1053440CF85C3").IsUnique();


            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Phone).HasMaxLength(256);
            entity.Property(e => e.Rank)
                .IsRequired()
                .HasMaxLength(256)
                .HasDefaultValue("iron");
            entity.Property(e => e.Status).HasDefaultValue(true);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_User_Role");

            entity.HasOne(d => d.Store).WithMany(p => p.Users)
                .HasForeignKey(d => d.StoreId)
                .HasConstraintName("FK_User_Store");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}